
import java.util.Arrays;

public class Employee { //superclass of all employees
    private String name; //Name of employee
    private int id; // ID number of the employee
    private String jobTitle; //Job Title of the employee
    private String pps; //PPS number of the employee
    private String email;//employee's email address
    private String address;//employee's address
    private String phoneNum;//employee's phone number
    private int age;//employee's age
    private boolean medicalCard;//boolean to check whether the employee has a medical card or not
    private boolean healthInsurance;//boolean to check whether the employee has an insurance card or not
    private String status;//String of the employee's status eg "Married"/"Single"/"Single Parent"...
    private String[] taxCredits;//an array to include how many tax credits an employee has, based on various factors such as status
    private String password; //String containing the employee's password for them to login
    private int numIncomes;//integer value to represent how many incomes the employees household has
    private boolean higherEarner;//checks if they are the higher earner or not
    private String[] unions;//array to include which unions an employee might be a part of
    private String healthPlan; //Health Plan name
    private String healthPlanType; //type of health plan


    /**
     * Constructor to construct an object of type Employee based on details read from a CSV file and parsed
     * @param employeeDetails Refers to the array of employees read from a CSV file
     */
    public Employee(String[] employeeDetails) {
        this.name = employeeDetails[0];
        this.id = Integer.parseInt(employeeDetails[1]);
        this.jobTitle = employeeDetails[2];
        this.pps = employeeDetails[3];
        this.email = employeeDetails[4];
        this.address = employeeDetails[5];
        this.phoneNum = employeeDetails[6];
        this.age = Integer.parseInt(employeeDetails[7]);
        this.medicalCard = Boolean.parseBoolean(employeeDetails[8]);
        this.healthInsurance = Boolean.parseBoolean(employeeDetails[9]);
        this.status = employeeDetails[10];
        this.taxCredits = employeeDetails[11].split(";");
        this.password = employeeDetails[12];
        this.numIncomes = Integer.parseInt(employeeDetails[13]);
        this.higherEarner = Boolean.parseBoolean(employeeDetails[14]);
        this.unions = employeeDetails[15].split(";");
        this.healthPlan = employeeDetails[16];
        this.healthPlanType = employeeDetails[17];
    }


    /**
     * Constructor to construct an object of type Employee based on the data fields in this class
     * @param name Refers to the name of the employee
     * @param id Refers to the ID of the employee
     * @param jobTitle Refers to the job title of the employee
     * @param pps Refers to the pps number of the employee
     * @param email Refers to the email address of the employee
     * @param address Refers to the address of the employee
     * @param phoneNum Refers to the phone number of the employee
     * @param age Refers to the age of the employee
     * @param medicalCard Refers to whether or not the employee holds a medical card
     * @param healthInsurance Refers to whether or not the employee has health insurance
     * @param status Refers to the status of the employee
     * @param taxCredits Refers to the tax credits the employee is entitled to
     * @param password Refers to the employee's login password
     * @param numIncomes Refers to the number of incomes in the employee's household
     * @param higherEarner Refers to whether or not the employee is the highest earner in their household
     * @param unions Refers to the unions to which the employee belongs
     * @param healthPlan Refers to the employee's health plan
     * @param healthPlanType Refers to the type of health plan the employee has
     *
     */
    public Employee(String name, int id, String jobTitle, String pps, String email, String address, String phoneNum, int age, boolean medicalCard, boolean healthInsurance, String status, String[] taxCredits, String password, int numIncomes, boolean higherEarner, String[] unions, String healthPlan, String healthPlanType) {
        this.name = name;
        this.id = id;
        this.jobTitle = jobTitle;
        this.pps = pps;
        this.email = email;
        this.address = address;
        this.phoneNum = phoneNum;
        this.age = age;
        this.medicalCard = medicalCard;
        this.healthInsurance = healthInsurance;
        this.status = status;
        this.taxCredits = taxCredits;
        this.password = password;
        this.numIncomes = numIncomes;
        this.higherEarner = higherEarner;
        this.unions = unions;
        this.healthPlan = healthPlan;
        this.healthPlanType = healthPlanType;
    }


    /**
     * Accessor method to obtain an employee's name
     */
    public String getName() {
        return name;
    }

    /**
     * Mutator method to set name of employee
     * @param name Refers to the name of the employee
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Accessor method to obtain an employee's ID
     */
    public int getId() {
        return id;
    }

    /**
     * Mutator method to set ID number of employee
     * @param id Refers to the ID number of the employee
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Accessor method to obtain an employee's job title
     */
    public String getJobTitle() {
        return jobTitle;
    }

    /**
     * Mutator method to set job title of the employee
     * @param jobTitle Refers to the job title of the employee
     */
    public void setJobTitle(String jobTitle) {
        this.jobTitle = jobTitle;
    }

    /**
     * Accessor method to obtain an employee's PPS number
     */
    public String getPps() {
        return pps;
    }

    /**
     * Mutator method to set PPS number of employee
     * @param pps Refers to the PPS number of the employee
     */
    public void setPps(String pps) {
        this.pps = pps;
    }

    /**
     * Accessor method to obtain an employee's PPS email address
     */
    public String getEmail() {
        return email;
    }

    /**
     * Mutator method to set email address of employee
     * @param email Refers to the email address of the employee
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * Accessor method to obtain an employee's address
     */
    public String getAddress() {
        return address;
    }

    /**
     * Mutator method to set address of employee
     * @param address Refers to the address of the employee
     */
    public void setAddress(String address) {
        this.address = address;
    }

    /**
     * Accessor method to obtain an employee's phone number
     */
    public String getPhoneNum() {
        return phoneNum;
    }

    /**
     * Mutator method to set phone number of employee
     * @param phoneNum Refers to the phone number of the employee
     */
    public void setPhoneNum(String phoneNum) {
        this.phoneNum = phoneNum;
    }

    /**
     * Accessor method to obtain an employee's age
     */
    public int getAge() {
        return age;
    }

    /**
     * Mutator method to set age of employee
     * @param age Refers to the age of the employee
     */
    public void setAge(int age) {
        this.age = age;
    }

    /**
     * Accessor method to obtain an employee's PPS number
     */
    public boolean hasMedicalCard() {
        return medicalCard;
    }

    /**
     * Mutator method to set whether employee holds medical card
     * @param medicalCard Refers to whether an employee holds a medical card
     */
    public void setMedicalCard(boolean medicalCard) {
        this.medicalCard = medicalCard;
    }

    /**
     * Accessor method to obtain whether an employee has health insurance
     */
    public boolean hasHealthInsurance() {
        return healthInsurance;
    }

    /**
     * Mutator method to set whether employee has health insurance
     * @param healthInsurance Refers to whether an employee has health insurance
     */
    public void setHealthInsurance(boolean healthInsurance) {
        this.healthInsurance = healthInsurance;
    }

    /**
     * Accessor method to obtain an employee's status
     */
    public String getStatus() {
        return status;
    }

    /**
     * Mutator method to set employee status
     * @param status Refers to an employee's status
     */
    public void setStatus(String status) {
        this.status = status;
    }

    /**
     * Accessor method to obtain an employee's tax credits
     */
    public String[] getTaxCredits() {
        return taxCredits;
    }

    /**
     * Mutator method to set employee's tax credits
     * @param taxCredits Refers to an employee's tax credits
     */
    public void setTaxCredits(String[] taxCredits) {
        this.taxCredits = taxCredits;
    }

    /**
     * Accessor method to obtain an employee's login password
     */
    public String getPassword() {
        return password;
    }

    /**
     * Mutator method to set employee's tax credits
     * @param password Refers to an employee's password
     */
    public void setPassword(String password) {
        this.password = password;
    }

    /**
     * Accessor method to determine number of incomes in an employee's household
     */
    public int getNumIncomes() {
        return numIncomes;
    }

    /**
     * Mutator method to set number of incomes in employee's household
     * @param numIncomes Refers to number of incomes in an employee's household
     */
    public void setNumIncomes(int numIncomes) {
        this.numIncomes = numIncomes;
    }

    /**
     * Accessor method to determine if employee is higher earner in their household
     */
    public boolean isHigherEarner() { //
        return higherEarner;
    }

    /**
     * Mutator method to set whether an employee is the highest earner in their household
     * @param higherEarner Refers to whether an employee is the highest earner in their household
     */
    public void setHigherEarner(boolean higherEarner) {
        this.higherEarner = higherEarner;
    }

    /**
     * Accessor method to obtain unions to which an employee belongs
     */
    public String[] getUnions() {
        return unions;
    }

    /**
     * Mutator method to set employee's unions
     * @param unions Refers to an employee's unions
     */
    public void setUnions(String[] unions) {
        this.unions = unions;
    }

    /**
     * Accessor method to obtain an employee's health plan
     */
    public String getHealthPlan() {
        return healthPlan;
    }

    /**
     * Mutator method to set employee's health plan
     * @param healthPlan Refers to an employee's health plan
     */
    public void setHealthPlan(String healthPlan) {
        this.healthPlan = healthPlan;
    }

    /**
     * Accessor method to obtain an employee's health plan type
     */
    public String getHealthPlanType() {
        return healthPlanType;
    }

    /**
     * Mutator method to set employee's health plan type
     * @param healthPlanType Refers to an employee's health plan type
     */
    public void setHealthPlanType(String healthPlanType) {
        this.healthPlanType = healthPlanType;
    }

    /**
     * toString() method to show the employee's details
     * is called by parttime and fulltime employee with 
     * their additional details
     */
    public String toString(){
        return "Name: " + getName() + "\nID: " + getId() + "\nTitle:" + getJobTitle()
                + "\nPPS: " + getPps() + "\nEmail: " + getEmail()
                + "\nAddress: " + getAddress() + "\nPhone Number: " + getPhoneNum()
                + "\nAge: " + getAge() + "\nMedical Card: " + hasMedicalCard()
                + "\nHealth Insurance: " + hasHealthInsurance() + "\nHealth Plan " + getHealthPlanType() + "\nHealth Plan Type: " + getHealthPlanType()
                + "\nStatus: " + getStatus() + "\nNumber of Household Incomes: " + getNumIncomes() + "\nHousehold Higher Earner: " + isHigherEarner()
                + "\nTax Credits: " + Arrays.toString(getTaxCredits()) + "\nUnions: " + Arrays.toString(getUnions());

    }
}
