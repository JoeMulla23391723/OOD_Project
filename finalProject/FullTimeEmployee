
public class FullTimeEmployee extends Employee {
    //subclass of employee for a full-time employee
    private int salaryScalePoint; //int to represent the point of the salary scale the employee is at
    private String department;// department name of the employee
    private double salary;//yearly salary of the employee//


    /**
     * Constructor to construct an object of type FullTimeEmployee based on details read from a CSV file and parsed
     * @param employeeDetails Refers to the String array of employees read from a CSV file
     */
    public FullTimeEmployee(String[] employeeDetails) {
        super(employeeDetails);
        this.salaryScalePoint = Integer.parseInt(employeeDetails[18]);
        this.department = employeeDetails[19];
        this.salary = Double.parseDouble(employeeDetails[20]);

    }

    /**
     * Constructor to construct an object of type FullTimeEmployee based on the data fields in this class and those in the Employee superclass
     * @param name Refers to the name of the employee
     * @param id Refers to the ID of the employee
     * @param jobTitle Refers to the job title of the employee
     * @param pps Refers to the pps number of the employee
     * @param email Refers to the email address of the employee
     * @param address Refers to the address of the employee
     * @param phoneNum Refers to the phone number of the employee
     * @param age Refers to the age of the employee
     * @param medicalCard Refers to whether or not the employee holds a medical card
     * @param healthInsurance Refers to whether or not the employee has health insurance
     * @param status Refers to the status of the employee
     * @param taxCredits Refers to the tax credits the employee is entitled to
     * @param password Refers to the employee's login password
     * @param numIncomes Refers to the number of incomes in the employee's household
     * @param higherEarner Refers to whether or not the employee is the highest earner in their household
     * @param unions Refers to the unions to which the employee belongs
     * @param healthPlan Refers to the employee's health plan
     * @param healthPlanType Refers to the type of health plan the employee has
     * @param salaryScalePoint Refers to an employee's promotion level on their salary scale
     * @param department Refers to the department to which the employee's job title belongs
     * @param salary Refers to an employee's annual salary
     */
    public FullTimeEmployee(String name, int id, String jobTitle, String pps, String email, String address, String phoneNum, int age, boolean medicalCard, boolean healthInsurance, String status, String[] taxCredits, String password, int numIncomes, boolean higherEarner, String[] unions, String healthPlan, String healthPlanType, int salaryScalePoint, String department, double salary) {
        super(name, id, jobTitle, pps, email, address, phoneNum, age, medicalCard, healthInsurance, status, taxCredits, password, numIncomes, higherEarner, unions, healthPlan, healthPlanType);
        this.salaryScalePoint = salaryScalePoint;
        this.department = department;
        this.salary = salary;
    }

    /**
     * Accessor method to obtain an employee's salary scale point
     */
    public int getSalaryScalePoint() {
        return salaryScalePoint;
    }

    /**
     * Mutator method to set salary scale point for employee
     * @param salaryScalePoint Refers to an employee's salary scale point
     */
    public void setSalaryScalePoint(int salaryScalePoint) {
        this.salaryScalePoint = salaryScalePoint;
    }

    /**
     * Accessor method to obtain an employee's professional department
     */
    public String getDepartment() {
        return department;
    }

    /**
     * Mutator method to set professional department for employee
     * @param department Refers to an employee's professional department
     */
    public void setDepartment(String department) {
        this.department = department;
    }


    /**
     * Mutator method to set employee's annual salary
     * @param employeeId Refers to an employee's annual salary
     */
    public void setSalary(int employeeId) {
        FullTimeSalaryCalculator salaryCalc = new FullTimeSalaryCalculator();
        this.salary = salaryCalc.getEmployeeSalaryWithoutDeductions(employeeId);
    }

    /**
     * Accessor method to obtain an employee's annual salary
     */
    public double getSalary() {
        return salary;
    }

    /**
     * Method to display data fields that a FullTimeEmployee object was constructed using
     */
    public String toString() {
        return super.toString() + "\nSalary Scale Point: " + getSalaryScalePoint()
                + "\nDepartment : " + getDepartment()
                + "\nSalary : " + getSalary();
    }

}
